"""
Django settings for petroweb project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
from unipath import FSPath as Path
import os
import json

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE = Path(__file__).absolute().ancestor(2)

if os.path.exists(BASE.child('_env').child('env-prod.json')):
    env_path = BASE.child('_env').child('env-prod.json')
elif os.path.exists(BASE.child('_env').child('env-dev.json')):
    env_path = BASE.child('_env').child('env-dev.json')
else:
    env_path = BASE.child('_env').child('env.json')

print "Using env file: %s" % env_path

with open(env_path) as handle:
    ENV = json.load(handle)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV['secret']#'mtosh*94g6%b$x)^s1lnn)490%xq%^#58%5_fpa^)56*j8n0!v'



ALLOWED_HOSTS = ENV['allowed_hosts']


if ENV['admin'] == "True":
    ADMIN = True
else: ADMIN = False


print "I will be running the following features:"
if ADMIN: print "[ADMIN]"

# SECURITY WARNING: don't run with debug turned on in production!
if ENV['debug'] == "True":
    DEBUG = True
else: 
    DEBUG = False

# Application definition

INSTALLED_APPS = [
    'grappelli',
    'filebrowser',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce',
    # 'sorl.thumbnail',
    # 'mce_filebrowser',
    'phonenumber_field',
    'homepage',
    'django_mailjet',
    'analytical',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'petroweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.core.context_processors.request'
            ],
            'loaders': [
                # PyJade part:   ##############################
                # ('pyjade.ext.django.Loader', (
                #     'django.template.loaders.filesystem.Loader',
                #     'django.template.loaders.app_directories.Loader',
                # ))

                # PyPugJS part:   ##############################
                ('pypugjs.ext.django.Loader', (
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ))
            ],
            'builtins': ['pypugjs.ext.django.templatetags'],
        },
    },
]


# TEMPLATES = [
#    {
#        'BACKEND': 'django.template.backends.django.DjangoTemplates',
#        'DIRS': [os.path.join(BASE_DIR, 'templates')],
#        'APP_DIRS': True,
#        'OPTIONS': {
#            'context_processors': [
#                'django.template.context_processors.debug',
#                'django.template.context_processors.request',
#                'django.contrib.auth.context_processors.auth',
#                'django.contrib.messages.context_processors.messages',
#            ],
#        },
#    },
# ]

WSGI_APPLICATION = 'petroweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
#if ENV['debug'] == "True":
#    DATABASES = {
#        'default': {
#            'ENGINE': 'django.db.backends.sqlite3',
#            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#        }
#    }
if True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
            'NAME': ENV.get('database', ''),  # Or path to db file if using sqlite3
            # The following settings are not used with sqlite3:
            'USER': ENV.get('db_user', ''),
            'PASSWORD': ENV.get('db_pass', ''),
            'HOST': ENV.get('db_host', ''),
            # Empty for localhost through domain sockets or '127.0.0.1' for TCP.
            'PORT': '',  # Set to empty string for default.
        }
    }

# Mail configuration 
# EMAIL_BACKEND = 'django_mailjet.backends.MailjetBackend'
MAILJET_API_KEY = ENV.get('mailjet_apikey', '')
MAILJET_API_SECRET = ENV.get('mailjey_apisecret', '')

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/html/static/'

MEDIA_URL = "/media/"
MEDIA_ROOT = "media/"

TINYMCE_DEFAULT_CONFIG = {
    'plugins': "table,spellchecker,paste,searchreplace,code,preview,contextmenu,autoresize",
    'theme': "advanced",
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 10,
    'width': '100%',
    'height': 900,
#    'file_browser_callback': 'mce_filebrowser',
}
TINYMCE_SPELLCHECKER = True
TINYMCE_COMPRESSOR = True

FILEBROWSER_DIRECTORY = 'img/'
FILEBROWSER_NORMALIZE_FILENAME = True

FILEBROWSER_EXTENSIONS = {
    'Image': ['.jpg','.jpeg','.gif','.png','.tif','.tiff'],
    'Document': ['.pdf','.doc','.rtf','.txt','.xls','.csv'],
    'Video': ['.mov','.wmv','.mpeg','.mpg','.avi','.rm'],
    'Audio': ['.mp3','.mp4','.wav','.aiff','.midi','.m4p']
}

FILEBROWSER_SELECT_FORMATS = {
    'file': ['Image','Document','Video','Audio'],
    'image': ['Image'],
    'document': ['Document'],
    'media': ['Video','Audio'],
}

GOOGLE_ANALYTICS_PROPERTY_ID = ENV.get('google_analytics_id', '')

ZOHO_AUTH_TOKEN = ENV.get('zoho_auth_token', '')